/**
 * Point: Two Pointers OR Divide & Conquer
 * Bug: 
 * Time Complexity: O(N)
 * Space Complexity: O(1)
 *
 *
 *
 */
/** Two Pointers(TOO SLOW) */
class Solution {
    public int searchInsert(int[] nums, int target) {
        if (nums == null || nums.length == 0) return 0;
        if (target < nums[0]) return 0;
        if (target > nums[nums.length-1]) return nums.length;
        
        int first = 0, end = nums.length - 1;
        
        while (first < end) {
            if (nums[first] < target) {
                first++;
            }
            else if (nums[end] > target) {
                end--;
            }
            else if (nums[first] == target) {
                return first;
            }
            else if (nums[end] == target) {
                return end;
            }
        }
        return first;
    }
}
/** Divide & Conquer */
class Solution {
    public int searchInsert(int[] nums, int target) {
        if (nums == null || nums.length == 0) return 0;
        
        int low = 0;
        int high = nums.length - 1;
        
        while (low <= high) {
            int mid = low + (high - low)/2;
            if (target > nums[mid]) low = mid + 1;
            else if (target < nums[mid]) high = mid - 1;
            else return mid;
        }        
        return low;
    }
}
