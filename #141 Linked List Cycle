/**
 * Point: HashSet, stored ListNode into set and check it
 * Bug: Wrongly used HashTable, just need to store ListNode. However, HashTable is used to store key and value
 * Time Complexity: O(N)
 * Space Complexity: O(N)
 * Optimizaiton: Two pointers/Fast and Slow Pointers, will reduce space complexity to O(1)
 */
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        if (head == null)  return false;
        
        HashSet<ListNode> set = new HashSet<>();
        
        while (head != null) {
            if (set.contains(head)) {
                return true;
            }
            else {
                set.add(head);
            }
            head = head.next;
        }
        return false;
    }
}
