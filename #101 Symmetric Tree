/**
 * Point: Recursion, to check node.left == node.right and check recursively to next level.
 * Bug: No
 * Time Complexity: O(N)
 * Space Complexity: O(N)
 *
 *
 */



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        return check(root, root);
    }
    
    public static boolean check(TreeNode left, TreeNode right) {
        if (left == null && right == null) return true;
        if (left == null || right == null) return false;
        
        if (left.val == right.val && check(left.left, right.right) & check(left.right, right.left)) return true;
        
        return false;
    }
    
}
