/**
 * Point: Recursion, to check node.left == node.right and check recursively to next level.
 * Bug: Line42-43, added root.left and root.right, failed to consider a kind of situation that only root without left and right nodes
 * Time Complexity: O(N)
 * Space Complexity: O(1)/Recursive, O(N)/Iteration
 *
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /** Recursive */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        return check(root, root);
    }
    
    public static boolean check(TreeNode left, TreeNode right) {
        if (left == null && right == null) return true;
        if (left == null || right == null) return false;
        
        if (left.val == right.val && check(left.left, right.right) & check(left.right, right.left)) return true;
        
        return false;
    }
    
}
/** Iteration */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        
        q.add(root);
        q.add(root);
        
        while (!q.isEmpty()) {
            TreeNode temp1 = q.poll();
            TreeNode temp2 = q.poll();
            
            if (temp1 == null && temp2 == null) continue;
            if (temp1 == null || temp2 == null) return false;
            if (temp1.val == temp2.val) {
                q.add(temp1.left);
                q.add(temp2.right);
                q.add(temp1.right);
                q.add(temp2.left);
            }
            else {
                return false;
            }
        }
        return true;
    }
}
