/**
 * Point: Queue and Tree
 * Bug: Put Line39 and Line40 out of for loop.
 * Time Complexity: O(N^2), too bad
 * Space Complexity: O(N)
 *
 *
 *
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        
        Queue<TreeNode> q = new LinkedList<>();
        int depth = 1;
        
        q.add(root);
        
        while (!q.isEmpty()) {
            int size = q.size();
            
            for (int i = 0; i < size; i++) {
                TreeNode temp = q.poll();
                if (temp.left == null && temp.right == null) {
                    return depth;
                }
                if (temp.left != null) q.add(temp.left);
                if (temp.right != null) q.add(temp.right);
            }
            depth++;
        }
        return depth;
    }
}
/** Recursion */
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        int leftDepth = minDepth(root.left);
        int rightDepth = minDepth(root.right);
        if (root.left != null && root.right != null) {
            return Math.min(leftDepth, rightDepth) + 1;
        }
        else {
            return Math.max(leftDepth,rightDepth) + 1;
        }
    }
}
