/**
 * Point: Sieve of Eratosthenes Algorithms. It means using a boolean array to mark those numbers which are composite the multiple each prime
 *        and then keep those primes unmarked.
 * Bug: Line22, notPrime[j] = true. This is wrong, it should be notPrime[i*j] = true. Such as, 4, 6, 8, 10 will be true if n = 10, 2 * 2 = 4,
 *      2 * 3 = 6 ...
 * Time Complexity: O(N)
 * Space Complexity: O(N)
 *
 */
 
class Solution {
    public int countPrimes(int n) {
        boolean[] notPrime = new boolean[n+1];
        
        int count = 0;
        
        for (int i = 2; i < n; i++) {
            if (notPrime[i] == true) {
                continue;
            }
            count++;
            for (int j = 2; i * j < n; j++) {
                notPrime[i*j] = true;
            }
        }
        return count;
    }
}
