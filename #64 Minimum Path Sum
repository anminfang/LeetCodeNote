/**
 * Points: DP. First step is to sum up two edges, which are the first row and first column; Second step is to sum up grid[1][1] and so on,
 *         basing on minimum sum of grid[0][1] or grid[1][0]
 * Bug:
 * Time Complexity: O(N^2)
 * Space Complexity: O(1)
 *
 */
 /** Method 1 */
class Solution {
    public int minPathSum(int[][] grid) {
        int rowLen = grid.length;
        int colLen = grid[0].length;
        int sum = 0;
        for (int i = 0; i < rowLen; i++) {
            for (int j = 0; j < colLen; j++) {
                if (i == 0 && j != 0) {
                    grid[i][j] = grid[i][j] + grid[i][j-1];
                }
                else if (i != 0 && j == 0) {
                    grid[i][j] = grid[i-1][j] + grid[i][j]; 
                }
                else if (i == 0 && j == 0) {
                    grid[i][j] = grid[i][j];
                }
                else {
                    grid[i][j] = Math.min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
                }
            }
        }
        return grid[rowLen-1][colLen-1];
    }
}
/** Method 2 / FASTER */
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] dp = new int[n];
        dp[0] = grid[0][0];
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i-1] + grid[0][i] ;
        }
        
        for (int i = 1; i < m; i++) {
            dp[0] += grid[i][0];
            for (int j = 1; j < n; j++) {
                dp[j] = Math.min(dp[j-1], dp[j]) + grid[i][j]; 
            }
        }
        return dp[n-1];
    }
}
