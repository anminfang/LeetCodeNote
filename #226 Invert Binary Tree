/**
 * Resource: Right View of Binary tree
 * Point: Using queue to store tree, and then put left node into right node, right node into left. At the same time, continue to store
 *        child nodes into queue and then do it again.
 * Bug1: forgot to add edge check. If root is null, return null.
 */



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) return null;
        
        Queue<TreeNode> q = new LinkedList<>();
        
        q.add(root);
        
        while (!q.isEmpty()) {
            int size = q.size();
            
            for (int i = 0; i < size; i++) {
                TreeNode temp = q.poll();
                TreeNode left = temp.left;
                temp.left = temp.right;
                temp.right = left;
                
                if (temp.left != null) q.add(temp.left);
                if (temp.right != null) q.add(temp.right);
                
            }
        }
        return root;
    }
}
