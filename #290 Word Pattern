/**
 * Point: HashMap, key and value is corresponding to each other. If key is already existing in the map, but value is not the same if loop
 *        to next element, return false. And, if value is already existing in the map but the key is diffrent, return false.
 * Bug: Line16, should check length of pattern and str. If they are not equal, return false.
 * Time Complexity: O(N)
 * Space Complexity: O(N)
 *
 */
 
class Solution {
    public boolean wordPattern(String pattern, String str) {
        String[] s = str.split(" ");
        
        HashMap<Character, String> map = new HashMap<>();
        
        if (pattern.length() != s.length) return false;
        
        for (int i = 0; i < s.length; i++) {
            if (map.containsKey(pattern.charAt(i))) {
                if (!map.get(pattern.charAt(i)).equals(s[i])) {
                    return false;
                }
            }
            else {
                if (map.containsValue(s[i])) {
                    return false;
                }
                map.put(pattern.charAt(i), s[i]);
            }
        }
        return true;
    }
}
