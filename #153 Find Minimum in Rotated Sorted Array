/**
 * Points: Binary Search, if nums[mid] > nums[0], it means that the array is original or rotated most part of the array, then go to right
 *         or go to left when nums[mid] < nums[0]; After the first step to tell which situation is happening, using nums[mid] to tell what
 *         is happening in left half array or right half array; There might have the largest element or a sorted array in the remainder
 *         array, and loop again to detect which one is minimum.
 * Bug: 
 * Time Complexity: O(lgN)
 * Space Complexity: O(1)
 *
 */
class Solution {
    public int findMin(int[] nums) {
        if (nums.length == 1) return nums[0];
        int left = 0, right = nums.length - 1;
        if (nums[right] > nums[left]) return nums[left];
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] > nums[mid+1]) return nums[mid+1];
            if (nums[mid-1] > nums[mid]) return nums[mid];
            if (nums[mid] > nums[0]) left = mid + 1;
            else right = mid; 
        }
        return -1;
    }
}
