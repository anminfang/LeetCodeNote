/**
 * Point: Backtrack
 * Bug: Line29, should be i + 1, NOT start + 1
 * Time Complexity: O(N^2)
 * Space Complexity: O(N)
 *
 *
 *
 */
/** Backtrack/TOO SLOW/2ms */
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        int[] target = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        backtrack(k, n, target, 0, res, new ArrayList<>());
        return res;
    }
    
    private void backtrack(int nums, int sum, int[] target, int start, List<List<Integer>> res, List<Integer> tmp) {
        if (sum < 0) return;
        if (tmp.size() == nums && sum == 0) {
            res.add(new ArrayList<>(tmp));
        }
        for (int i = start; i < target.length; i++) {
            tmp.add(target[i]);
            backtrack(nums, sum - target[i], target, i + 1, res, tmp);
            tmp.remove(tmp.size() - 1);
        }
    }
}
