/**
 * Point: Method 1, used HashMap to calculate times of numbers, if time equals to one, that's target.
 *        Method 2, Bit Maniputation, used XOR to detect only one in array
 * Bug:
 * Time Complexity: O(N)
 * Space Complexity: O(N)/Method 1, O(1)/Method 2
 * Optimizaiton: Tried to avoid using extra space 
 *
 */
 /** Method 1*/
class Solution {
    public int singleNumber(int[] nums) {
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i])+1);
            }
            else {
                map.put(nums[i], 1);
            }
        }
        
        for (int j = 0; j < nums.length; j++) {
            if (map.get(nums[j]) == 1) return nums[j];
        }
        return -1;
    }
}

/** Method 2*/
class Solution {
    public int singleNumber(int[] nums) {
        
        int result = 0;
        
        for (int i = 0; i < nums.length; i++) {
            result ^= nums[i]; // result = 4 ^ 2 ^ 1 ^ 4 ^ 2 = 1
        }
        
        return result;
    }
}
