/** Regular Method(Time Limit Exceeded) */
class Solution {
    public double myPow(double x, int n) {
        double res = 1.0;
        if (n == 0) return res;
        else if (n > 0) {
            res = cal(x, n);
        }
        else {
            res = 1 / cal(x, n = -n);
        }
        return res;
    }
    
    private double cal(double x, int n) {
        double res = 1.0;
        while (n > 0) {
                res *= x;
                n--;
        }
        return res;
    }
}
/** Faster Method */
class Solution {
    public double myPow(double x, int n) {
        if (n == 0) return 1;
        if (n < 0) {
            x = 1/x;
            return (n %2 == 0) ? myPow(x*x, -(n/2)) : x * myPow(x*x, -(n/2));
        }
        return (n % 2 == 0) ? myPow(x*x, n/2) : x * myPow(x*x, n/2); 
    }
}
