/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /** TOO SLOW */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if (root == null) return 0;
        ArrayList<Integer> res = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode tmp = q.poll();
                res.add(tmp.val);
                if (tmp.left != null) q.add(tmp.left);
                if (tmp.right != null) q.add(tmp.right);
            }
        }
        return findKthSmallest(res, k);
    }
    
    public int findKthSmallest(ArrayList<Integer> list, int k) {
        if (list == null || list.size() == 0) return -1;
        Collections.sort(list);
        int res = list.get(k - 1);
        return res;
    }
}
/** Divide and Conquer/Recursion */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int leftNodeNums = countNode(root.left);
        if (leftNodeNums + 1 == k) {
            return root.val;
        }
        else if (leftNodeNums + 1 > k) {
            return kthSmallest(root.left, k);
        }
        else {
            return kthSmallest(root.right, k - leftNodeNums - 1);
        }
    }
    
    private int countNode(TreeNode node) {
        if (node == null) return 0;
        return 1 + countNode(node.left) + countNode(node.right);
    }
}
/** Inorder Mehod */
class Solution {

    int count;
    int res;

    public int kthSmallest(TreeNode root, int k) {
        count = k;
        inorder(root);
        return res;
    }
    
    private void inorder(TreeNode node) {
       if (node == null) return;
       inorder(node.left);
       count--;
       if (count == 0) {
           res = node.val;
       }
       inorder(node.right);
    }
}
