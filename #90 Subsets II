/**
 * Point: Backtrcking
 * Bug: Line12, should sort the array first
 * Time Complexity: O(N)
 * Space Complexity: O(1)
 *
 *
 */
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        subset(res, new ArrayList<Integer>(), nums, 0);
        return res;
    }
    
    private void subset(List<List<Integer>> res, List<Integer> tmp, int[] nums, int index) {
        res.add(new ArrayList<Integer>(tmp));
        for (int i = index; i < nums.length; i++) {
            if(i > index && nums[i] == nums[i-1]) continue;
            tmp.add(nums[i]);
            subset(res, tmp, nums, i + 1);
            tmp.remove(tmp.size() - 1);
        }
    }
}
