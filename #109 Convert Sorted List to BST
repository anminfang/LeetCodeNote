/**
 * Point: Converted Linked List to Array first, then used recursion to generate Tree
 * Bug1: Line33-36, should have a copy to run and count the size of ListNode, but I used head to run, STUPID
 * Bug2: Line45, didnt' minus one. STUPID
 * Time Complexity: O(N)
 * Space COmplexity: O(N), not good
 * Optimizaiton: 
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        int count = 0;
        ListNode runner = head;
        
        while (runner != null) {
            runner = runner.next;
            count++;
        }
        
        int[] arr = new int[count];
        
        for (int i = 0; i < count; i++) {
            arr[i] = head.val;
            head = head.next;
        }
        
        TreeNode root = bst(arr, 0, count-1);
        
        return root;
    }
    
    public TreeNode bst(int[] arr, int low, int high) {
        if (low > high) return null;
        
        int mid = low + (high - low)/2;
        
        TreeNode root = new TreeNode(arr[mid]);
        
        root.left = bst(arr, low, mid-1);
        root.right = bst(arr, mid+1, high);
        
        return root;
    }
}
