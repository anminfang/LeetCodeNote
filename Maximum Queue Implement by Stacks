import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Main {


/*请完成下面这个函数，实现题目要求的功能
当然，你也可以不按照下面这个模板来作答，完全按照自己的想法来 ^-^ 
******************************开始写代码******************************/
static class MyQueue {

    Stack<Integer> s1;
    Stack<Integer> s2;
    Stack<Integer> s3;
    
    /** Initialize your data structure here. */
    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
        s3 = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        while (!s1.isEmpty()) {
            s2.push(s1.pop());
    	}
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        while (!s2.isEmpty()) {
        	s1.push(s2.pop());
        }
        return s1.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        while (!s2.isEmpty()) {
        	s1.push(s2.pop());
        }
        return s1.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }

    /** Returns the maximal value in this queue. */
    public int max() {
		while (!s1.isEmpty()) {
        	s2.push(s1.pop());    
        }
        int max = Integer.MIN_VALUE;
        while (!s2.isEmpty()) {
            int temp = s2.pop();
        	if (max < temp) {
            	max = temp;
            }
            s1.push(temp);
            s3.push(max);
        }
        return s3.pop();
    }
}

/******************************结束写代码******************************/


    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        boolean res;
            
        MyQueue queue = new MyQueue();
        int _dsa_size = 0;
        _dsa_size = Integer.parseInt(in.nextLine().trim());
        int[] _dsa = new int[_dsa_size];
        int _dsa_item;
        for(int _dsa_i = 0; _dsa_i < _dsa_size; _dsa_i++) {
            _dsa_item = Integer.parseInt(in.nextLine().trim());
            _dsa[_dsa_i] = _dsa_item;
            queue.push(_dsa_item);
            System.out.println(queue.max());
            System.out.println(queue.empty());
        }

        for(int _dsa_i = 0; _dsa_i < _dsa_size; _dsa_i++) {
            System.out.println(queue.max());
            queue.pop();
            System.out.println(queue.empty());
        }
    }
}
