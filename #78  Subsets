/**
 * Point: Combination
 * Bug: 
 * Time Complexity: O(N)
 * Space Complexity: O(1)
 *
 *
 */
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        combination(res, 0, nums, new ArrayList<Integer>());
        return res;
    }
    
    private void combination(List<List<Integer>> res, int index, int[] nums, List<Integer> tmp) {
        res.add(new ArrayList<>(tmp));
        for (int i = index; i < nums.length; i++) {
            tmp.add(nums[i]);
            combination(res, i + 1, nums, tmp);
            tmp.remove(tmp.size() - 1);
        }
    }
}
